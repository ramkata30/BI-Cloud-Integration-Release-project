name: Run SQL on Redshift

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Git branch to checkout"
        required: true
        type: string
      sql_path:
        description: "Path to SQL file or folder containing SQL files"
        required: true
        type: string
      execution_order:
        description: "Optional comma-separated list of SQL files to execute in order"
        required: false
        type: string

permissions:
  id-token: write   # required for OIDC to AWS
  contents: read

jobs:
  run-sql:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout selected branch
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # Step 2: Configure AWS credentials (OIDC or pre-configured secrets)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/<GitHubOIDCRole> # Replace with actual IAM Role
          aws-region: us-east-1

      # Step 3: Install PostgreSQL client (Redshift compatible)
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      # Step 4: Resolve SQL files to execute
      - name: Prepare SQL file list
        id: prepare-sql
        run: |
          SQL_PATH="${{ github.event.inputs.sql_path }}"
          ORDER="${{ github.event.inputs.execution_order }}"

          if [ -n "$ORDER" ]; then
            echo "Using provided execution order..."
            FILES=$(echo "$ORDER" | tr ',' '\n' | xargs)
          else
            if [ -f "$SQL_PATH" ]; then
              FILES="$SQL_PATH"
            elif [ -d "$SQL_PATH" ]; then
              echo "Sorting SQL files alphabetically by default..."
              FILES=$(ls "$SQL_PATH"/*.sql | sort)
            else
              echo "Invalid sql_path: $SQL_PATH"
              exit 1
            fi
          fi

          echo "Files to execute:"
          echo "$FILES"

          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 5: Execute SQL files sequentially against Redshift
      - name: Run SQL on Redshift
        env:
          REDSHIFT_HOST: ${{ secrets.REDSHIFT_HOST }}
          REDSHIFT_PORT: 5439
          REDSHIFT_DB: ${{ secrets.REDSHIFT_DB }}
          REDSHIFT_USER: ${{ secrets.REDSHIFT_USER }}
          REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
        run: |
          for file in ${{ steps.prepare-sql.outputs.files }}; do
            echo "-----------------------------------"
            echo "Executing: $file"
            echo "-----------------------------------"
            psql "host=$REDSHIFT_HOST port=$REDSHIFT_PORT dbname=$REDSHIFT_DB user=$REDSHIFT_USER password=$REDSHIFT_PASSWORD sslmode=require" \
              -v ON_ERROR_STOP=1 -f "$file"
          done
